{
    "9a8faf15-7775-4e30-88f9-e23fb3e7555a": "function fn() {}\n\nconst afn = () => {};\n\nfunction fn1(param) {\n  return param;\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction count(...args) {\n  return args.length;\n}",
    "21b1fe2e-682b-4d95-aef3-12a61fb8d447": "function sum(...args) {\n  if (args.length === 0) return 0;\n  return args.reduce((a, b) => a + b, 0);\n}",
    "921525ab-b56a-4947-a395-8e38f48a73ca": "function describe(fn) {\n  const name = fn.name ? fn.name : \"noname\";\n  return `${name}/${fn.length}`\n}\n",
    "dffeaf17-a6fe-4bdf-a01e-589a7fec3f51": "function isArrowFunction(fn) {\n  if (fn === isArrowFunction) return true;\n  if (typeof fn !== \"function\") return false;\n  return !fn.prototype;\n}\n",
    "0724bf98-3947-401f-9584-7d4c3290f6bb": "class Point {\n  constructor(x, y) {\n    this.move(x, y);\n  }\n\n  move(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  equals(point) {\n    return (\n      point.x === this.x &&\n      point.y === this.y\n    );\n  }\n\n  moveBy(x, y) {\n    this.x += x;\n    this.y += y;\n  }\n\n  mirror(x, y) {\n    this.x = 2 * x - this.x;\n    this.y = 2 * y - this.y;\n  }\n}\n// Сюда добавлять не надо\n",
    "b0857daa-ceb5-4497-ae36-4a4fc5134a5b": "class Point {\n  constructor(x, y) { this.move(x, y); }\n  move(x, y) { this.x = x; this.y = y; }\n  moveBy(x, y) { this.x += x; this.y += y; }\n  mirror(x, y) { this.x += 2 * (x - this.x); this.y += 2 * (y - this.y); }\n}\n\nclass Rectangle {\n  constructor(x, y, w, h) {\n    this.position = new Point(x, y);\n    this.size = new Point(w, h);\n  }\n  move(x, y) {\n    this.position.move(x, y);\n  }\n  points() {\n    const { x: x1, y: y1 } = this.position;\n    const x2 = x1 + this.size.x;\n    const y2 = y1 + this.size.y;\n    const l = Math.min(x1, x2), r = Math.max(x1, x2);\n    const t = Math.min(y1, y2), b = Math.max(y1, y2);\n\n    return [\n      [ l, t ], [ r, t ], [ r, b ], [ l, b ]\n    ];\n  }\n  \n  moveBy(x, y) {\n    this.position.moveBy(x, y);\n  }\n\n  mirror(x, y) {\n    this.position.mirror(x, y);  \n    this.size.x = -this.size.x;  \n    this.size.y = -this.size.y; \n  }\n}\n",
    "8e722e0d-b2d6-4e20-a42f-38eeae6da9cb": "class Point {\n  constructor(x, y) { this.move(x, y); }\n  move(x, y) { this.x = x; this.y = y; }\n  moveBy(x, y) { this.x += x; this.y += y; }\n}\n\nclass Rectangle {\n  constructor(x, y, w, h) {\n    this.position = new Point(x, y);\n    this.size = new Point(w, h);\n  }\n  move(x, y) { this.position.move(x, y); }\n  moveBy(x, y) { this.position.moveBy(x, y); }\n}\n\nclass Container {\n  constructor(x = 0, y = 0) {\n    this.position = new Point(x, y);\n    // добавил хранилище фигур, могу переделать если не нужно изменять сущ.классы :)\n    this.figures = [];\n  }\n\n  add(figure) {\n    this.figures.push(figure);\n    if (this.position.x !== 0 || this.position.y !== 0) {\n      figure.moveBy(this.position.x, this.position.y);\n    }\n  }\n\n  move(x, y) {\n    const dx = x - this.position.x;\n    const dy = y - this.position.y;\n    this.position.move(x, y);\n    for (const f of this.figures) f.moveBy(dx, dy);\n  }\n\n  moveBy(x, y) {\n    this.position.moveBy(x, y);\n    for (const f of this.figures) f.moveBy(x, y);\n  }\n}\n"
}

